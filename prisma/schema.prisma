generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  phone     String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  bookings  Booking[]

  @@map("users")
}

model Court {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  location     String
  pricePerHour Float
  avaiability  Boolean
  bookings     Booking[]

  @@map("courts")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("day_of_week")
}

model Schedule {
  id           String        @id @default(uuid()) @db.Uuid
  dayOfWeek     DayOfWeek     @map("day_of_week")
  startTime    Int           @map("start_time")
  endTime      Int           @map("end_time")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  bookingSlots BookingSlot[]

  @@map("schedules")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED

  @@map("booking_status")
}

model Booking {
  id               String        @id @default(uuid()) @db.Uuid
  userId           String?        @map("user_id") @db.Uuid 
  courtId          String        @map("court_id") @db.Uuid
  customerName     String?        @map("customer_name") 
  extraEquipmentId String?        @map("extra_equipment_id") @db.Uuid
  status           BookingStatus
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  numberOfRackets  Int           @default(0)
  bookingSlots     BookingSlot[]
  payments         Payment[]

  user           User?           @relation(fields: [userId], references: [id])
  court          Court          @relation(fields: [courtId], references: [id])
  extraEquipment ExtraEquipment? @relation(fields: [extraEquipmentId], references: [id])

  @@map("bookings")
}

model BookingSlot {
  id          String   @id @default(uuid()) @db.Uuid
  scheduleId  String   @map("schedule_id") @db.Uuid
  bookingId   String   @map("booking_id") @db.Uuid
  bookingDate DateTime @map("booking_date")
  startTime   Int      @map("start_time")
  endTIme     Int      @map("end_time")

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  booking  Booking  @relation(fields: [bookingId], references: [id])

  @@map("booking_slots")
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELED
  REFUNDED

  @@map("payment_status")
}

model Payment {
  id               String        @id @default(uuid()) @db.Uuid
  bookingId        String        @map("booking_id") @db.Uuid
  amount           Float
  externalChargeId String        @map("external_charge_id") @db.Uuid
  expiresDate      DateTime      @map("expires_date")
  status           PaymentStatus
  createdAt        DateTime      @default(now()) @map("created_at")
  confirmedAt      DateTime      @map("confirmed_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model ExtraEquipment {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  price    Float
  bookings Booking[]

  @@map("extra_equipments")
}
